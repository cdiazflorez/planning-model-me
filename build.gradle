plugins {
    id 'java'
    id 'com.github.spotbugs' version '2.0.1'
}

group 'com.mercadolibre'
version '1.0-SNAPSHOT'

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.github.spotbugs'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://git.ml.com:8081/nexus/content/repositories/MLGrailsPlugins" }
        maven { url "http://git.ml.com:8081/nexus/content/groups/Arquitectura" }
    }
}

subprojects {
    apply plugin: 'java'

    test {
        reports.html.enabled = true
    }

    dependencies {
        testImplementation 'org.assertj:assertj-core:3.11.1'
        testImplementation 'org.mockito:mockito-core:3.3.3'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.3.3'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    checkstyle {
        toolVersion "8.24"
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled true
            html.enabled true
            html.stylesheet resources.text.fromFile('../config/xsl/checkstyle-style.xsl')
        }
    }

    pmd {
        toolVersion = '6.2.0'
        ruleSetFiles = files("../config/pmd/pmd_rules.xml")
        ruleSets = []
        incrementalAnalysis = true
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    spotbugs {
        toolVersion = '3.1.12'
        excludeFilter = file("../config/spotbugs/excludeFilter.xml")
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests/test")
    reportOn subprojects*.test
}

jacocoTestReport {
    dependsOn = subprojects.test
    description = 'Generates an aggregate report from all subprojects'

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() }

    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/PlanningModelMiddleendApplication**',
                    '**/config/**',
                    '**/logging/**'
            ])
        }))
    }
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, "git_hooks/pre-push")
    into { new File(rootProject.rootDir, ".git/hooks") }
}

test.finalizedBy(testReport)
check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport
check.dependsOn installGitHooks
