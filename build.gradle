plugins {
    id 'java'
}

group 'com.mercadolibre'
version '1.0-SNAPSHOT'

allprojects {
    apply plugin: 'jacoco'

    repositories {
		maven { url "http://maven.artifacts.furycloud.io/repository/all" }
        mavenLocal()
	}
}

subprojects {
    apply plugin: 'java'

    test {
        reports.html.enabled = true
    }

    dependencies {
        testImplementation 'org.assertj:assertj-core:3.11.1'
        testImplementation 'org.mockito:mockito-inline:3.12.4'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    }

    jacocoTestReport {
        afterEvaluate {
            additionalSourceDirs.setFrom(files(sourceSets.main.allSource.srcDirs))
            sourceDirectories.setFrom(files(sourceSets.main.allSource.srcDirs))
            classDirectories.setFrom(files(sourceSets.main.output))

        }
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests/test")
    reportOn subprojects*.test
}

jacocoTestReport {
    dependsOn = subprojects.test
    description = 'Generates an aggregate report from all subprojects'

    afterEvaluate {
        additionalSourceDirs.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
        sourceDirectories.setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
        classDirectories.setFrom(files(subprojects.sourceSets.main.output))
        executionData.setFrom(files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() })
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/PlanningModelMiddleendApplication**',
                    '**/config/**',
                    '**/logging/**'
            ])
        }))
    }
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, "git_hooks/pre-push")
    into { new File(rootProject.rootDir, ".git/hooks") }
}

test.finalizedBy(testReport)
check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport
check.dependsOn installGitHooks
